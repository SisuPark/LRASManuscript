library(dada2);packageVersion("dada2")
library(Biostrings); packageVersion("Biostrings")
library(ShortRead); packageVersion("ShortRead")
library(ggplot2); packageVersion("ggplot2")
library(reshape2); packageVersion("reshape2")
library(phyloseq); packageVersion("phyloseq")
path1 <- "~/Desktop/LRAS/Data/Fecal1" # CHANGE ME to location of the First Replicate fastq files
path2 <- "~/Desktop/LRAS/Data/Fecal2" # CHANGE ME to location of the Second Replicate fastq files
path.out <- "Figures/"
path.rds <- "RDS/"
fns1 <- list.files(path1, pattern="fastq.gz", full.names=TRUE)
fns2 <- list.files(path2, pattern="fastq.gz", full.names=TRUE)
F27 <- "AGRGTTYGATYMTGGCTCAG"
R1492 <- "RGYTACCTTGTTACGACTT"
rc <- dada2:::rc
theme_set(theme_bw())
nops2 <- file.path(path2, "noprimers", basename(fns2))
for(i in seq_along(fns2)) {
fn <- fns2[[i]]; nop <- nops2[[i]]
dada2:::removePrimers(fn, nop, primer.fwd=F27, primer.rev=dada2:::rc(R1492), orient=TRUE)
}
nops2
fns1
fns2
library(dada2);packageVersion("dada2")
library(Biostrings); packageVersion("Biostrings")
library(ShortRead); packageVersion("ShortRead")
library(ggplot2); packageVersion("ggplot2")
library(reshape2); packageVersion("reshape2")
library(phyloseq); packageVersion("phyloseq")
path1 <- "~/Desktop/LRAS/Data/Fecal1" # CHANGE ME to location of the First Replicate fastq files
path2 <- "~/Desktop/LRAS/Data/Fecal2" # CHANGE ME to location of the Second Replicate fastq files
path.out <- "Figures/"
path.rds <- "RDS/"
fns1 <- list.files(path1, pattern="fastq.gz", full.names=TRUE)
fns2 <- list.files(path2, pattern="fastq.gz", full.names=TRUE)
F27 <- "AGRGTTYGATYMTGGCTCAG"
R1492 <- "RGYTACCTTGTTACGACTT"
rc <- dada2:::rc
theme_set(theme_bw())
nops2 <- file.path(path2, "noprimers", basename(fns2))
for(i in seq_along(fns2)) {
fn <- fns2[[i]]; nop <- nops2[[i]]
dada2:::removePrimers(fn, nop, primer.fwd=F27, primer.rev=dada2:::rc(R1492), orient=TRUE)
}
path1
fns1
i
fn
nop
dada2:::removePrimers(fn, nop, primer.fwd=F27, primer.rev=dada2:::rc(R1492), orient=TRUE)
sq <- getSequences(fn)
sq[[1]]
vmatchPattern(pattern="AGRGTTYGATYMTGGCTCAG", DNAString(subject=sq[[1]]))
?vmatchPattern
matchPattern(pattern="AGRGTTYGATYMTGGCTCAG", subject=DNAString(sq[[1]]))
vmatchPattern(pattern="AGRGTTYGATYMTGGCTCAG", subject=DNAString(sq[[1:10]]))
matchPattern(pattern="AGRGTTYGATYMTGGCTCAG", subject=DNAString(sq[[1]]))
matchPattern(pattern="AGRGTTYGATYMTGGCTCAG", subject=DNAString(sq[[1]]), fixed=FALSE)
matchPattern(pattern="AGRGTTYGATYMTGGCTCAG", subject=DNAString(sq[[1]]), fixed=FALSE, max.mismatch=3)
matchPattern(pattern="AGRGTTYGATYMTGGCTCAG", subject=DNAString(sq[[1]]), fixed=FALSE, max.mismatch=6)
AGRGTTYGATYMTGGCTCAG
TGAGTTTCATTCTTGCGAAC
head(width(sq))
fn
sq <- getSequences(fn)
nop
hist(width(fn), 100)
hist(width(sq), 100)
lens.fn <- lapply(nops2, function(fn) nchar(getSequences(fn)))
lens <- do.call(c, lens.fn)
hist(lens, 100)
lens.fn <- lapply(fns2, function(fn) nchar(getSequences(fn)))
nchar(getSequences(fns2[[1]])) -> lens2
hist(lens2, 100)
nchar(getSequences(fns1[[1]])) -> lens1
hist(lens1, 100)
summary(lens1)
summary(lens2)
F27 <- "AGRGTTYGATYMTGGCTCAG"
R1492 <- "RGYTACCTTGTTACGACTT"
fn <- fns2[[1]]
fout <- nops2[[1]]
primer.fwd <- F27
primer.rev <- dada2:::rc(R1492)
orient=TRUE
max.mismatch=2; allow.indels=FALSE; require.fwd=TRUE; require.rev=TRUE;
trim.fwd=TRUE; trim.rev=TRUE; n = 1e5; compress=TRUE; verbose = FALSE
# Read in file
fq <- readFastq(fn)
inseqs <- length(fq)
# Match patterns
match.fwd <- as(vmatchPattern(primer.fwd, sread(fq), max.mismatch=max.mismatch, with.indels=allow.indels, fixed=fixed.fwd), "list")
fixed.fwd <- C_isACGT(primer.fwd)
if(has.rev) fixed.rev <- C_isACGT(primer.rev)
# Read in file
fq <- readFastq(fn)
inseqs <- length(fq)
# Match patterns
match.fwd <- as(vmatchPattern(primer.fwd, sread(fq), max.mismatch=max.mismatch, with.indels=allow.indels, fixed=fixed.fwd), "list")
fixed.fwd <- C_isACGT(primer.fwd)
fixed.fwd <- dada2:::C_isACGT(primer.fwd)
if(has.rev) fixed.rev <- dada2:::C_isACGT(primer.rev)
# Read in file
fq <- readFastq(fn)
# Check and enforce primers
if(!is.character(primer.fwd)) stop("Primer sequences must be provided as base R strings.")
if(!is.null(primer.rev)) {
has.rev <- TRUE
if(!is.character(primer.rev)) stop("Primer sequences must be provided as base R strings.")
}
fixed.fwd <- dada2:::C_isACGT(primer.fwd)
if(has.rev) fixed.rev <- dada2:::C_isACGT(primer.rev)
# Read in file
fq <- readFastq(fn)
inseqs <- length(fq)
# Match patterns
match.fwd <- as(vmatchPattern(primer.fwd, sread(fq), max.mismatch=max.mismatch, with.indels=allow.indels, fixed=fixed.fwd), "list")
if(has.rev) {
match.rev <- as(vmatchPattern(primer.rev, sread(fq), max.mismatch=max.mismatch, with.indels=allow.indels, fixed=fixed.rev), "list")
}
# If orient, match reverse complement as well
if(orient) {
fq.rc <- reverseComplement(fq)
match.fwd.rc <- as(vmatchPattern(primer.fwd, sread(fq.rc), max.mismatch=max.mismatch, with.indels=allow.indels, fixed=fixed.fwd), "list")
if(has.rev) {
match.rev.rc <- as(vmatchPattern(primer.rev, sread(fq.rc), max.mismatch=max.mismatch, with.indels=allow.indels, fixed=fixed.rev), "list")
}
}
# Tally up hits
# Check for possible mis-oriented primer sequences?
hits.fwd <- sapply(match.fwd, length)
if(has.rev) hits.rev <- sapply(match.rev, length)
if(!require.fwd) stop("Currently, only require.fwd=TRUE is supported.")
if(has.rev && !require.rev) stop("Currently, only require.rev=TRUE is supported when a reverse primer sequence is provided.")
if(require.fwd && sum(hits.fwd == 0)) stop("No sequences matched the provided forward primer sequence.")
head(hits.fwd)
